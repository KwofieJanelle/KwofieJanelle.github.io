index.html 
<!DOCTYPE html>
<html>
<head>
    <title>EZ-ROUTER</title>
    <script src="https.//polyfill.io/v3/polyfill.min.js?features=default"></script>
    <link rel="stylesheet" type ="text/css" href="style.css"></link>
    <script src="main.js"></script>
</head> 
<body> 

<div id="floating-panel">
  <div>
    <div>
        <b>Starting Address: </b>
      <input type="text" id="startingaddress" placeholder="Input starting address">
    </div>
  </div>

  <div>
    <div>
        <b>Destination Address: </b>
      <input type="text" id="destinationaddress" placeholder="Input destination address">
    </div>
  </div>

  <div>
    <b>Mode of Travel: </b>
    <select id="mode">
      <option value="WALKING">Walking</option>
      <option value="DRIVING">Driving</option>
      <option value="BICYCLING">Bicycling</option>
      <option value="TRANSIT">Transit</option>
    </select>
  </div>

  <div>
    <button id="submit">Submit</button>
  </div>
</div>

    <div id="map">
</div>

<div>
  <b>Travel Time: </b><span id="Travel Time: "></span>
</div>


    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBjTYIhlcnCjYQXmBcywLjLgCsw7shdS4U&callback=initMap&libraries=&v=weekly">
    </script>

    </body>
    </html>



main.js
function initMap() {
  const directionsRenderer = new google.maps.DirectionsRenderer();
  const directionsService = new google.maps.DirectionsService();
  const map = new google.maps.Map(document.getElementById("map"), {
    zoom: 14,
    center: { lat: 37.77, lng: -122.447 },
  });

  directionsRenderer.setMap(map);

  document.getElementById("submit").addEventListener("click", () => {
    const startingAddress = document.getElementById("startingaddress").value;
    const destinationAddress = document.getElementById("destinationaddress").value;
    const selectedMode = document.getElementById("mode").value;

    if (!startingAddress || !destinationAddress || !selectedMode) {
      window.alert("Please enter starting and destination addresses and select a mode of travel");
      return;
    }

    calculateAndDisplayRoute(directionsService, directionsRenderer);
  });
}

function calculateAndDisplayRoute(directionsService, directionsRenderer) {
  const startingAddress = document.getElementById("startingaddress").value;
  const destinationAddress = document.getElementById("destinationaddress").value;
  const selectedMode = document.getElementById("mode").value;

  const geocoder = new google.maps.Geocoder();
  geocoder.geocode({ address: startingAddress }, (results, status) => {
    if (status !== "OK") {
      window.alert("Starting address not found");
      return;
    }

    const startLocation = results[0].geometry.location;

    geocoder.geocode({ address: destinationAddress }, (results, status) => {
      if (status !== "OK") {
        window.alert("Destination address not found");
        return;
      }

      const endLocation = results[0].geometry.location;

      directionsService
        .route({
          origin: startLocation,
          destination: endLocation,
          travelMode: google.maps.TravelMode[selectedMode],
        })
        .then((response) => {
          directionsRenderer.setDirections(response);

          // Get total travel time in minutes
          const totalMinutes = response.routes[0].legs.reduce(
            (acc, leg) => acc + leg.duration.value,
            0
          ) / 60;

          // Format total travel time as string
          let totalTimeStr;
          if (totalMinutes >= 60) {
            const hours = Math.floor(totalMinutes / 60);
            const minutes = Math.round(totalMinutes % 60);
            totalTimeStr = `${hours} hour${hours > 1 ? "s" : ""} ${minutes} minute${
              minutes > 1 ? "s" : ""
            }`;
          } else {
            const minutes = Math.ceil(totalMinutes);
            totalTimeStr = `${minutes} minute${minutes > 1 ? "s" : ""}`;
          }

          // Remove previous travel time element
          const travelTimeElem = document.getElementById("travel-time");
          if (travelTimeElem) {
            travelTimeElem.remove();
          }

          // Display total travel time in HTML
          const newTravelTimeElem = document.createElement("div");
          newTravelTimeElem.id = "travel-time";
          newTravelTimeElem.innerHTML = `<b>Travel Time:</b> ${totalTimeStr}`;
          document.getElementById("floating-panel").appendChild(newTravelTimeElem);
        })
        .catch((e) =>
          window.alert("Direction request failed due to " + e)
        );
    });
  });
}

Style.css
#map{
    height: 100%;
    width: 100%
}

html,
body{
    height:100%;
    margin: 0;
    padding: 0;
}

#floating-panel{
    position: absolute;
    bottom: 0;
    left: 0;
   
    z-index: 5;
background-color: white;
  opacity: 0.9;
  color: darkGrey

    
    text-align: center;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    line-height: 30px;
    padding-left: 10px;
}

